{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\VSO\\\\react-tutorial\\\\blog\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\VSO\\\\react-tutorial\\\\blog\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _ from 'lodash';\nimport jsonPlaceholder from '../apis/jsonPlaceholder';\nexport var fetchPostsAndUsers = function fetchPostsAndUsers() {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(dispatch, getState) {\n        var userIds;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return dispatch(fetchPosts());\n\n              case 2:\n                userIds = _.uniq(_.map(getState().posts, 'userId'));\n                userIds.forEach(function (id) {\n                  return dispatch(fetchUser(id));\n                });\n\n                _.chain(getState().posts).map('userId').uniq().forEach(function (id) {\n                  return dispatch(fetchUser(id));\n                });\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }()\n  );\n};\nexport var fetchPosts = function fetchPosts() {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(dispatch) {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return jsonPlaceholder.get('/posts');\n\n              case 2:\n                response = _context2.sent;\n                dispatch({\n                  type: 'FETCH_POSTS',\n                  payload: response.data\n                });\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function (_x3) {\n        return _ref2.apply(this, arguments);\n      };\n    }()\n  );\n};\nexport var fetchUser = function fetchUser(id) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref3 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(dispatch) {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return jsonPlaceholder.get(\"/users/\".concat(id));\n\n              case 2:\n                response = _context3.sent;\n                dispatch({\n                  type: 'FETCH_USER',\n                  payload: response.data\n                });\n\n              case 4:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      return function (_x4) {\n        return _ref3.apply(this, arguments);\n      };\n    }()\n  );\n}; //---memozie version\n// export const fetchUser = id => dispatch => _fetchUser(id, dispatch);\n// const _fetchUser = _.memoize(async (id, dispatch) => {\n//     const response = await jsonPlaceholder.get(`/users/${id}`);\n//     dispatch({ type: 'FETCH_USER', payload: response.data })\n// });","map":{"version":3,"sources":["C:\\VSO\\react-tutorial\\blog\\src\\actions\\index.js"],"names":["_","jsonPlaceholder","fetchPostsAndUsers","dispatch","getState","fetchPosts","userIds","uniq","map","posts","forEach","id","fetchUser","chain","get","response","type","payload","data"],"mappings":";;AAAA,OAAOA,CAAP,MAAc,QAAd;AACA,OAAOC,eAAP,MAA4B,yBAA5B;AAEA,OAAO,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAM,iBAAOC,QAAP,EAAiBC,QAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAC9BD,QAAQ,CAACE,UAAU,EAAX,CADsB;;AAAA;AAE9BC,gBAAAA,OAF8B,GAEpBN,CAAC,CAACO,IAAF,CAAOP,CAAC,CAACQ,GAAF,CAAMJ,QAAQ,GAAGK,KAAjB,EAAwB,QAAxB,CAAP,CAFoB;AAGpCH,gBAAAA,OAAO,CAACI,OAAR,CAAgB,UAAAC,EAAE;AAAA,yBAAIR,QAAQ,CAACS,SAAS,CAACD,EAAD,CAAV,CAAZ;AAAA,iBAAlB;;AAEAX,gBAAAA,CAAC,CAACa,KAAF,CAAQT,QAAQ,GAAGK,KAAnB,EAA0BD,GAA1B,CAA8B,QAA9B,EAAwCD,IAAxC,GAA+CG,OAA/C,CAAuD,UAAAC,EAAE;AAAA,yBAAIR,QAAQ,CAACS,SAAS,CAACD,EAAD,CAAV,CAAZ;AAAA,iBAAzD;;AALoC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAN;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA3B;AAQP,OAAO,IAAMN,UAAU,GAAG,SAAbA,UAAa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAM,kBAAMF,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACLF,eAAe,CAACa,GAAhB,CAAoB,QAApB,CADK;;AAAA;AACtBC,gBAAAA,QADsB;AAE5BZ,gBAAAA,QAAQ,CAAC;AAAEa,kBAAAA,IAAI,EAAE,aAAR;AAAuBC,kBAAAA,OAAO,EAAEF,QAAQ,CAACG;AAAzC,iBAAD,CAAR;;AAF4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAN;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAnB;AAKP,OAAO,IAAMN,SAAS,GAAG,SAAZA,SAAY,CAAAD,EAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAI,kBAAMR,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACJF,eAAe,CAACa,GAAhB,kBAA8BH,EAA9B,EADI;;AAAA;AACrBI,gBAAAA,QADqB;AAE3BZ,gBAAAA,QAAQ,CAAC;AAAEa,kBAAAA,IAAI,EAAE,YAAR;AAAsBC,kBAAAA,OAAO,EAAEF,QAAQ,CAACG;AAAxC,iBAAD,CAAR;;AAF2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAApB,C,CAKP;AACA;AAEA;AACA;AACA;AACA","sourcesContent":["import _ from 'lodash';\r\nimport jsonPlaceholder from '../apis/jsonPlaceholder';\r\n\r\nexport const fetchPostsAndUsers = () => async (dispatch, getState) => {\r\n    await dispatch(fetchPosts());\r\n    const userIds = _.uniq(_.map(getState().posts, 'userId'));\r\n    userIds.forEach(id => dispatch(fetchUser(id)));\r\n\r\n    _.chain(getState().posts).map('userId').uniq().forEach(id => dispatch(fetchUser(id)))\r\n};\r\n\r\nexport const fetchPosts = () => async dispatch => {\r\n    const response = await jsonPlaceholder.get('/posts');\r\n    dispatch({ type: 'FETCH_POSTS', payload: response.data })\r\n};\r\n\r\nexport const fetchUser = id => async dispatch => {\r\n    const response = await jsonPlaceholder.get(`/users/${id}`);\r\n    dispatch({ type: 'FETCH_USER', payload: response.data })\r\n};\r\n\r\n//---memozie version\r\n// export const fetchUser = id => dispatch => _fetchUser(id, dispatch);\r\n\r\n// const _fetchUser = _.memoize(async (id, dispatch) => {\r\n//     const response = await jsonPlaceholder.get(`/users/${id}`);\r\n//     dispatch({ type: 'FETCH_USER', payload: response.data })\r\n// });"]},"metadata":{},"sourceType":"module"}