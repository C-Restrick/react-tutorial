{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\VSO\\\\react-tutorial\\\\blog\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\VSO\\\\react-tutorial\\\\blog\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _ from 'lodash';\nimport jsonPlaceholder from '../apis/jsonPlaceholder';\nexport var fetchPosts = function fetchPosts() {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(dispatch) {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return jsonPlaceholder.get('/posts');\n\n              case 2:\n                response = _context.sent;\n                dispatch({\n                  type: 'FETCH_POSTS',\n                  payload: response.data\n                });\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }()\n  );\n};\nexport var fetchUser = function fetchUser(id) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(dispatch) {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return jsonPlaceholder.get(\"/users/\".concat(id));\n\n              case 2:\n                response = _context2.sent;\n                dispatch({\n                  type: 'FETCH_USER',\n                  payload: response.data\n                });\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function (_x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }()\n  );\n}; //---memozie version (only allows one time request though)\n// export const fetchUser = id => dispatch => _fetchUser(id, dispatch);\n// const _fetchUser = _.memoize(async (id, dispatch) => {\n//     const response = await jsonPlaceholder.get(`/users/${id}`);\n//     dispatch({ type: 'FETCH_USER', payload: response.data })\n// });","map":{"version":3,"sources":["C:\\VSO\\react-tutorial\\blog\\src\\actions\\index.js"],"names":["_","jsonPlaceholder","fetchPosts","dispatch","get","response","type","payload","data","fetchUser","id"],"mappings":";;AAAA,OAAOA,CAAP,MAAc,QAAd;AACA,OAAOC,eAAP,MAA4B,yBAA5B;AAEA,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAM,iBAAOC,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACLF,eAAe,CAACG,GAAhB,CAAoB,QAApB,CADK;;AAAA;AACtBC,gBAAAA,QADsB;AAE5BF,gBAAAA,QAAQ,CAAC;AAAEG,kBAAAA,IAAI,EAAE,aAAR;AAAuBC,kBAAAA,OAAO,EAAEF,QAAQ,CAACG;AAAzC,iBAAD,CAAR;;AAF4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAN;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAnB;AAKP,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAAAC,EAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAI,kBAAMP,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACJF,eAAe,CAACG,GAAhB,kBAA8BM,EAA9B,EADI;;AAAA;AACrBL,gBAAAA,QADqB;AAE3BF,gBAAAA,QAAQ,CAAC;AAAEG,kBAAAA,IAAI,EAAE,YAAR;AAAsBC,kBAAAA,OAAO,EAAEF,QAAQ,CAACG;AAAxC,iBAAD,CAAR;;AAF2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAApB,C,CAKP;AACA;AAEA;AACA;AACA;AACA","sourcesContent":["import _ from 'lodash';\r\nimport jsonPlaceholder from '../apis/jsonPlaceholder';\r\n\r\nexport const fetchPosts = () => async (dispatch) => {\r\n    const response = await jsonPlaceholder.get('/posts');\r\n    dispatch({ type: 'FETCH_POSTS', payload: response.data })\r\n};\r\n\r\nexport const fetchUser = id => async dispatch => {\r\n    const response = await jsonPlaceholder.get(`/users/${id}`);\r\n    dispatch({ type: 'FETCH_USER', payload: response.data })\r\n};\r\n\r\n//---memozie version (only allows one time request though)\r\n// export const fetchUser = id => dispatch => _fetchUser(id, dispatch);\r\n\r\n// const _fetchUser = _.memoize(async (id, dispatch) => {\r\n//     const response = await jsonPlaceholder.get(`/users/${id}`);\r\n//     dispatch({ type: 'FETCH_USER', payload: response.data })\r\n// });"]},"metadata":{},"sourceType":"module"}